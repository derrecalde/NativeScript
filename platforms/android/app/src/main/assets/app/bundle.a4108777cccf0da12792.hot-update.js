webpackHotUpdate("bundle",{

/***/ "../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js?!./components/HelloWorld.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  methods: {
    onTodoItemTap(item) {
      var index = this.todos.indexOf(item);
      action("What do you want to do with this task?", "Cancel", ["Mark completed", "Delete forever"]).then(result => {
        console.log(result);

        switch (result) {
          case "Mark completed":
            this.dones.unshift(item);
            this.todos.splice(index, 1);
            this.activeTabIndex = 1;
            break;

          case "Delete forever":
            this.todos.splice(index, 1);
            break;

          case "Cancel" || false:
            break;
        }
      });
    },

    onTodoCircleTap(item) {
      var index = this.todos.indexOf(item);
      this.dones.unshift(item);
      this.todos.splice(index, 1);
      this.activeTabIndex = 1;
    },

    onCompletedItemTap(item) {
      var index = this.dones.indexOf(item);
      action("What do you want to do with this task?", "Cancel", ["Mark to do", "Delete forever"]).then(result => {
        console.log(result);

        switch (result) {
          case "Mark to do":
            this.todos.unshift(item);
            this.dones.splice(index, 1);
            this.activeTabIndex = 0;
            break;

          case "Delete forever":
            this.dones.splice(index, 1);
            break;

          case "Cancel" || false:
            break;
        }
      });
    },

    onCompletedCircleTap(item) {
      var index = this.dones.indexOf(item);
      this.todos.unshift(item);
      this.dones.splice(index, 1);
      this.activeTabIndex = 0;
    },

    onReturnPress() {
      if (this.textFieldValue.trim() === "") {
        this.$refs.taskInput.nativeView.focus();
        return;
      }

      console.log("New task added: " + this.textFieldValue + ".");
      this.todos.unshift({
        name: this.textFieldValue
      });
      this.textFieldValue = "";
    },

    onTabChange(tab) {
      this.activeTabIndex = tab.value;
    }

  },

  data() {
    return {
      todos: [{
        name: "Feed dog"
      }, {
        name: "Ride bike"
      }, {
        name: "Go grocery shopping"
      }],
      dones: [],
      textFieldValue: "",
      activeTabIndex: 0
    };
  }

});

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,